-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Assn (x, e) -> [(c.fst <- [x, evalExpr (c.fst, e)]), c.snd]
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip -> c
  | Read (s) -> [(c.fst <- [s, readWorld (c.snd).fst]), readWorld (c.snd).snd]
  | Write (e) -> [c.fst, writeWorld (evalExpr (c.fst, e), c.snd)]
  | If (e, stmt1, stmt2) ->
      case evalExpr (c.fst, e) of 
        0 -> eval (c, stmt2)
      | _ -> eval (c, stmt1)
      esac
  | While (e, stmt1) ->
      case evalExpr (c.fst, e) of
        0 -> c
      | _ -> eval (eval (c, stmt1), stmt)
      esac
  | DoWhile (stmt1, e) ->
      case eval (c, stmt1) of
        c1 ->
          case evalExpr (c1.fst, e) of
            0 -> c1
          | _ -> eval (c1, stmt)
          esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
