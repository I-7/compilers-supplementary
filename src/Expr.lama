-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn (Ref (expr1), expr2) -> var tmp = eval (c, expr2); [[tmp.fst.fst <- [expr1, tmp.snd[0]], tmp.fst.snd], {tmp.snd[0]}]
  | Seq (expr1, expr2) -> var tmp = eval (c, expr1); eval (tmp.fst, expr2)
  | Skip -> [c, {}]
  | Read (Ref (x)) -> var tmp = readWorld (w); [[st <- [x, tmp.fst], tmp.snd], {}]
  | Write (expr1) -> var tmp = eval (c, expr1); [[tmp.fst.fst, writeWorld (tmp.snd[0], tmp.fst.snd)], {}]
  | Const (x) -> [c, {x}]
  | Var (x) -> [c, {st (x)}]
  | Binop (op, expr1, expr2) -> var tmp1 = eval (c, expr1); var tmp2 = eval (tmp1.fst, expr2); [tmp2.fst, {evalBinop (op, tmp1.snd[0], tmp2.snd[0])}]
  | Ignor (expr1) -> [eval (c, expr1).fst, {}]
  esac
}

fun evalBinop(op, x, y) {
  case op of
    "+" -> x + y
  | "-" -> x - y
  | "*" -> x * y
  | "/" -> x / y
  | "%" -> x % y
  | "==" -> x == y
  | "!=" -> x != y
  | "<"  -> x <  y
  | "<=" -> x <= y
  | ">"  -> x >  y
  | ">=" -> x >= y
  | "&&" -> x && y
  | "!!" -> x !! y
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
