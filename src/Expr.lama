-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun addNames1 (s, expr) {
  case expr of
    Var (l) -> addNames (s, l)
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (expr1, expr2) -> var tmp = eval (c, expr1); var tmp2 = eval (tmp.fst, expr2); [[tmp2.fst.fst <- [tmp.snd[0], Var (tmp2.snd[0])], tmp2.fst.snd], {tmp2.snd[0]}]
  | Seq (expr1, expr2) -> var tmp = eval (c, expr1); eval (tmp.fst, expr2)
  | Skip -> [c, {}]
  | Read (x) -> var tmp = readWorld (w); [[s <- [x, Var (tmp.fst)], tmp.snd], {}]
  | Write (expr1) -> var tmp = eval (c, expr1); [[tmp.fst.fst, writeWorld (tmp.snd[0], tmp.fst.snd)], {}]
  | If (expr1, expr2, expr3) -> var tmp = eval (c, expr1); case tmp.snd of {0} -> eval (tmp.fst, expr3) | _ -> eval (tmp.fst, expr2) esac
  | While (expr1, expr2) -> var tmp = eval (c, expr1); case tmp.snd of {0} -> tmp | _ -> eval (eval (tmp.fst, expr2).fst, expr) esac
  | DoWhile (expr1, expr2) -> var tmp = eval (c, expr1); var tmp2 = eval (tmp.fst, expr2); case tmp2.snd of {0} -> tmp2 | _ -> eval (tmp2.fst, expr) esac
  | Var (x) ->
      case lookup (s, x) of
        Var (x) -> [c, {x}]
      esac
  | Ref (x) -> [c, {x}]
  | Const (x) -> [c, {x}]
  | Binop (op, expr1, expr2) -> var tmp1 = eval (c, expr1); var tmp2 = eval (tmp1.fst, expr2); [tmp2.fst, {evalOp (op, tmp1.snd[0], tmp2.snd[0])}]
  | Ignore (expr1) -> [eval (c, expr1).fst, {}]
  | Scope (defs, expr) ->
      case s.enterScope of
        s ->
          case foldl (addNames1, s, defs) of 
            s ->
              case eval ([s, w], expr) of
                [c@[s, w], _] -> [[s.leaveScope, w], {}]
              esac
          esac
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}