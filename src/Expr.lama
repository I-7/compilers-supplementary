-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addNames1 (s, expr) {
  case expr of
    Var (l) -> addNames (s, l)
  | Fun (name, args, body) -> addFunction (s, name, args, body)
  esac
}

fun zip1 (list1, list2) {
  case list1 of
    h1:t1 ->
      case list2 of
        h2:t2 -> [h1, Var (h2)]:zip1 (t1, t2)
      | _ -> {}
      esac
  | _ -> {}
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (expr1, expr2) -> var tmp = eval (c, expr1); var tmp2 = eval (tmp.fst, expr2); [[tmp2.fst.fst <- [tmp.snd, Var (tmp2.snd)], tmp2.fst.snd], tmp2.snd]
  | Set (name, expr) -> var tmp = eval (c, expr); [[tmp.fst.fst <- [name, Var (tmp.snd)], tmp.fst.snd], tmp.snd]
  | Seq (expr1, expr2) -> var tmp = eval (c, expr1); eval (tmp.fst, expr2)
  | Skip -> [c, Void]
  | If (expr1, expr2, expr3) -> var tmp = eval (c, expr1); case tmp.snd of 0 -> eval (tmp.fst, expr3) | _ -> eval (tmp.fst, expr2) esac
  | While (expr1, expr2) -> var tmp = eval (c, expr1); case tmp.snd of 0 -> tmp | _ -> eval (eval (tmp.fst, expr2).fst, expr) esac
  | DoWhile (expr1, expr2) -> var tmp = eval (c, expr1); var tmp2 = eval (tmp.fst, expr2); case tmp2.snd of 0 -> tmp2 | _ -> eval (tmp2.fst, expr) esac
  | Var (x) ->
      case lookup (s, x) of
        Var (x) -> [c, x]
      esac
  | Ref (x) -> [c, x]
  | Const (x) -> [c, x]
  | Binop (op, expr1, expr2) -> var tmp1 = eval (c, expr1); var tmp2 = eval (tmp1.fst, expr2); [tmp2.fst, evalOp (op, tmp1.snd, tmp2.snd)]
  | Ignore (expr1) -> [eval (c, expr1).fst, Void]
  | Scope (defs, expr) ->
      case s.enterScope of
        s ->
          case foldl (addNames1, s, defs) of 
            s ->
              case eval ([s, w], expr) of
                [c@[s, w], res] -> [[s.leaveScope, w], res]
              esac
          esac
      esac
  | Call (name, exprs) ->
      case lookup (s, name) of
        Fun (args, External) ->
          case evalList (c, exprs) of
            [c@[s, w], list] ->
              case evalBuiltin (name, list, w) of
                [res, w] -> [[s, w], res]
              esac
          esac
      | Fun (args, body) ->
          case evalList (c, exprs) of
            [c@[s, w], list] ->
              case s.enterFunction of
                ss ->
                  case addNames (ss, args) of
                    ss ->
                      case foldl (infix <-, ss, zip1 (args, list)) of
                        ss ->
                          case eval ([ss, w], body) of
                            [c@[ss, ww], res] -> [[s.leaveFunction (ss.getGlobal), ww], res]
                          esac
                      esac
                  esac
              esac
          esac
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  var dbgfile = fopen ("dbg.txt", "a+"); fprintf (dbgfile, "%s\n", expr.string); fclose (dbgfile);
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
