-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

var mainFunName = "main";

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
      {} -> c
    | i:tail -> var r = evalInsn (c, i, tail); eval (r[0], r[1])
    esac
  }

  fun evalInsn (c@[st, cst, s, w], i, tail) {
    --var dbgfile = fopen ("dbg.txt", "a+"); fprintf (dbgfile, "%s\n", showSMInsn (i)); fclose (dbgfile);
    case i of
      BINOP (op) ->
        case st of
          y:x:st -> [[evalBinop (op, x, y):st, cst, s, w], tail]
        esac
    | LD (x) -> [[lookup (s, x):st, cst, s, w], tail]
    | ST (x) ->
        case st of
          z:st -> [[z:st, cst, assign (s, x, z), w], tail]
        esac
    | CONST (n) -> [[n:st, cst, s, w], tail]
    | LABEL (s) -> [c, tail]
    | JMP (l) -> [c, fromLabel (env, l)]
    | CJMP ("z", l) ->
        case st of
          z:st -> case z of
            0 -> [[st, cst, s, w], fromLabel (env, l)]
          | _ -> [[st, cst, s, w], tail]
          esac
        esac
    | CJMP ("nz", l) ->
        case st of
          z:st -> case z of
            0 -> [[st, cst, s, w], tail]
          | _ -> [[st, cst, s, w], fromLabel (env, l)]
          esac
        esac
    | LDA (x) -> [[x:st, cst, s, w], tail]
    | STI ->
        case st of
          v:x:st -> [[v:st, cst, assign (s, x, v), w], tail]
        esac
    | DROP ->
        case st of
          x:st -> [[st, cst, s, w], tail]
        esac
    | GLOBAL (x) -> [[st, cst, assign (s, Glb (x), 0), w], tail]
    | BEGIN (f, a, l) ->
        case take (st, a) of
          [t, h] -> [[t, s:cst, foldl (fun ([state, cnt], a) { [assign (state, Arg (cnt), a), cnt + 1] }, [makeState (a, l), 0], h)[0], w], tail]
        esac
    | END ->
        case cst of
          s:cst -> [[st, cst, s, w], {}]
        esac
    | CALL (f, n) -> [eval (c, fromLabel (env, f)), tail]
    | BUILTIN (f, n) ->
        case take (st, n) of
          [t, h] ->
            case evalBuiltin (f, h, w) of
              [res, w] -> [[res:t, cst, s, w], tail]
            esac
        esac
    | STRING (ss) -> [[ss:st, cst, s, w], tail]
    | ELEM ->
        case st of
          i:Sexp (s, a):st -> [[a[i]:st, cst, s, w], tail]
        | i:ar:st -> [[ar[i]:st, cst, s, w], tail]
        esac
    | STA ->
        case st of
          v:i:ar:st-> ar[i]:=v; [[v:st, cst, s, w], tail]
        esac
    | ARRAY (n) ->
        case take (st, n) of
          [_:t, h] -> [[h.listArray:t, cst, s, w], tail]
        esac
    | SEXP (ss, n) ->
        case take (st, n) of
          [_:t, h] -> [[Sexp (s, h.listArray):t, cst, s, w], tail]
        esac
    esac
  }

  fun evalBinop (op, x, y) {
    case op of
      "+" -> x + y
    | "-" -> x - y
    | "*" -> x * y
    | "/" -> x / y
    | "%" -> x % y
    | "==" -> x == y
    | "!=" -> x != y
    | "<"  -> x <  y
    | "<=" -> x <= y
    | ">"  -> x >  y
    | ">=" -> x >= y
    | "&&" -> x && y
    | "!!" -> x !! y
    esac
  }
  
  --var dbgfile = fopen ("dbg.txt", "a+"); fprintf (dbgfile, "%s\n", showSM (insns)); fclose (dbgfile);
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {

  fun addBindings (env, defs) {
    case defs of
      Var (list)             -> foldl (addVar, env, list)
    | Fun (name, args, body) ->
        case genFunLabel (env, name) of
          [fLabel, env] -> env.addFun (name, fLabel, args.size)
        esac
    esac
  }

  fun firstTraversal (env, defs) {
    foldl (addBindings, env, defs)
  }

  fun secondTraversal (env, defs) {
    foldl (fun (env, def) {
      case def of
        Fun (name, args, body) -> env.rememberFun (name, args, body)
      | _ -> env
      esac
    }, env, defs)
  }

  fun addGlobals (env, defs) {
    foldl (fun (code, defs) {
      case defs of
        Var (list) -> code <+> foldl (fun (code, name) { code <+ GLOBAL (name) }, code, list)
      | Fun (name, args, body) -> code
      esac
    }, emptyBuffer(), defs)
  }

  fun compileExprs (env, args) {
    case args of
      arg1 : args ->
        case env.genLabel of
          [lab, env] ->
            case compile (lab, env, arg1) of
              [labUsed, env, tCode] ->
                case compileExprs (env, args) of 
                  [false, env, oCode] -> [false, env, tCode <+> label (lab, labUsed) <+> oCode]
                esac
            esac
        esac
    | _ -> [false, env, emptyBuffer ()]
    esac
  }

  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    --var dbgfile = fopen ("dbg.txt", "a"); fprintf (dbgfile, "%s\n", stmt.string); fclose (dbgfile);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVal (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Assn (e1, e2) ->
        case e1 of
          ElemRef (expr1, expr2) ->
            case env.genLabels (3) of
              [pLab, qLab, rLab, env] ->
                case compile (pLab, env, expr1) of
                  [pLabUsed, env, expr1Code] ->
                    case compile (qLab, env, expr2) of
                      [qLabUsed, env, expr2Code] ->
                        case compile (rLab, env, e2) of
                          [rLabUsed, env, e2Code] -> [false, env, expr1Code <+> label (pLab, pLabUsed) <+> expr2Code <+> label (qLab, qLabUsed) <+> e2Code <+> label (rLab, rLabUsed) <+ STA]
                        esac
                    esac
                esac
            esac
        | _ -> 
            case env.genLabels (2) of
              [pLab, qLab, env] ->
                case compile (pLab, env, e1) of
                  [pLabUsed, env, e1Code] ->
                    case compile (qLab, env, e2) of
                      [qLabUsed, env, e2Code] -> [false, env, e1Code <+> label (pLab, pLabUsed) <+> e2Code <+> label (qLab, qLabUsed) <+ STI]
                    esac
                esac
            esac
        esac
    | Set (name, expr) ->
        case compile (lab, env, expr) of
          [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+> singletonBuffer (ST (lookupVar (env, name)))]
        esac
    | Binop (op, e1, e2) ->
        case env.genLabels (2) of
          [pLab, qLab, env] ->
            case compile (pLab, env, e1) of
              [pLabUsed, env, e1Code] ->
                case compile (qLab, env, e2) of
                  [qLabUsed, env, e2Code] -> [false, env, e1Code <+> label (pLab, pLabUsed) <+> e2Code <+> label (qLab, qLabUsed) <+ BINOP (op)]
                esac
            esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [pLab, env] ->
             case compile (pLab, env, s1) of
               [pLabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (pLab, pLabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If    (e, s1, s2) ->
        case env.genLabels (4) of
          [pLab, qLab, rLab, tLab, env] ->
            case compile (pLab, env, e) of 
               [pLabUsed, env, eCode] ->
                case compile (qLab, env, s1) of
                  [qLabUsed, env, s1Code] ->
                    case compile (rLab, env, s2) of
                      [rLabUsed, env, s2Code] -> [true, env, eCode
                                                             <+> label (pLab, pLabUsed)
                                                             <+  CJMP ("z", tLab)
                                                             <+> s1Code
                                                             <+> label (qLab, qLabUsed)
                                                             <+  JMP (lab)
                                                             <+  LABEL (tLab)
                                                             <+> s2Code 
                                                             <+> label (rLab, rLabUsed)]
                    esac
                esac
            esac
        esac
    | While (e, s) ->
        case env.genLabels (3) of
          [pLab, qLab, tLab, env] ->
            case compile (pLab, env, e) of
              [pLabUsed, env, eCode] ->
                case compile (qLab, env, s) of
                  [qLabUsed, env, sCode] -> [true, env, singletonBuffer (LABEL (tLab))
                                                        <+> eCode
                                                        <+> label (pLab, pLabUsed)
                                                        <+  CJMP ("z", lab)
                                                        <+> sCode
                                                        <+> label (qLab, qLabUsed)
                                                        <+  JMP (tLab)]
                esac
            esac
        esac
    | DoWhile (s, e) ->
        case env.genLabels (3) of
          [pLab, qLab, tLab, env] ->
            case compile (pLab, env, e) of
              [pLabUsed, env, eCode] ->
                case compile (qLab, env, s) of
                  [qLabUsed, env, sCode] -> [false, env, singletonBuffer (LABEL (tLab))
                                                         <+> sCode
                                                         <+> label (qLab, qLabUsed)
                                                         <+> eCode
                                                         <+> label (pLab, pLabUsed) 
                                                         <+  CJMP ("nz", tLab)]
                esac
            esac
        esac
    | Ignore (x) ->
        case compile (lab, env, x) of
          [labUsed, env, xCode] -> [false, env, xCode <+> label (lab, labUsed) <+ DROP]
        esac
    | Scope (defs, expr) ->
        case env.beginScope of
          env ->
            case firstTraversal (env, defs) of
              env ->
                case secondTraversal (env, defs) of
                  env ->
                    case compile (lab, env, expr) of
                      [labUsed, env, exprCode] ->
                        if env.isGlobal
                        then [labUsed, env.endScope, addGlobals (env, defs)
                                                 <+  LABEL (mainFunName)
                                                 <+  BEGIN (mainFunName, 0, getLocals (env))
                                                 <+> exprCode
                                                 <+> label (lab, labUsed)
                                                 <+  END]
                        else [labUsed, env.endScope, exprCode <+> label (lab, labUsed)]
                        fi
                    esac
                esac
            esac
        esac
    | Call (name, args) ->
        case env.lookupFun (name) of
          Fun (fLabel, nargs) ->
            case fLabel[0] of
              'L' ->
                case compileExprs (env, args) of
                  [false, env, code] -> [false, env, code <+ CALL (fLabel, nargs)]
                esac
            | '$' ->
                case compileExprs (env, args) of
                  [false, env, code] -> [false, env, code <+ BUILTIN (name, nargs)]
                esac
            esac
        esac
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Elem (expr1, expr2) ->
        case env.genLabel of
          [pLab, env] ->
             case compile (pLab, env, expr1) of
               [pLabUsed, env, expr1Code] ->
                  case compile (lab, env, expr2) of
                    [labUsed, env, expr2Code] -> [false, env, expr1Code <+> label (pLab, pLabUsed) <+> expr2Code <+> label (lab, labUsed) <+ ELEM]
                  esac
             esac
        esac
    | Array (exprs) ->
        case compileExprs (env, Const (exprs.size) : exprs) of
          [false, env, code] -> [false, env, code <+ ARRAY (exprs.size)]
        esac
    | Sexp (s, exprs) ->
        case compileExprs (env, Const (exprs.size + 1) : exprs) of
          [false, env, code] -> [false, env, code <+ SEXP (s, exprs.size)]
        esac
    esac
  }

  fun compileNestedFunction ([env, code], func) {
    case func of
      Fun (name, args, body, state) -> --var dbgfile = fopen ("dbg.txt", "a"); fprintf (dbgfile, "> %s\n", name); fclose (dbgfile);
        case genFunLabel (env, name) of
          [fLabel, env] ->
            case genLabel (addArgs (beginFun (env, state), args)) of
              [lab, env] ->
                case compile (lab, env, body) of
                  [labUsed, env, fCode] -> [env, code <+ LABEL (fLabel) <+ BEGIN (fLabel, size (args), getLocals (env)) <+> fCode <+> label (lab, labUsed) <+ END]
                esac
            esac
        esac
    esac
  }

  fun genFuns (env, funs) {
    --var dbgfile = fopen ("dbg.txt", "a"); fprintf (dbgfile, " () %s\n", funs.string); fclose (dbgfile);
    case beginScope (env) of
      env ->
        case foldl (compileNestedFunction, [env, emptyBuffer ()], funs) of
          [env, code] -> [endScope  (env), code]
        esac
    esac
  }

  case genLabel (addFun (addFun (addFun (beginScope (initCompEnv ()),
                                                                    "read"  , "$read"  , 0),
                                                                    "write" , "$write" , 1),
                                                                    "length", "$length", 1)) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
          case getFuns (env) of
            [funs, env] -> 
              case find (fun (v) { case v of LABEL (mainFunName) -> 1 | _ -> 0 esac }, code.getBuffer) of
                Some (_) -> getBuffer $ code <+> genFuns (env, funs)[1]
              | None -> getBuffer $ singletonBuffer (LABEL (mainFunName)) <+  BEGIN (mainFunName, 0, getLocals (env)) <+> code <+ END <+> genFuns (env, funs)[1] 
              esac
          esac
      esac
  esac
}
